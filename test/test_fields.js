// Generated by CoffeeScript 1.4.0
(function() {
  var cm, expect, say,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  cm = require('../coffee-model');

  expect = require('expect.js');

  say = console.log;

  describe('Model Field', function() {
    describe('with invalid type', function() {
      return it('errors on instantiation', function() {
        var Pet, f;
        Pet = (function(_super) {

          __extends(Pet, _super);

          function Pet() {
            return Pet.__super__.constructor.apply(this, arguments);
          }

          Pet.prototype.fields = {
            species: {
              type: 'char'
            },
            name: {
              type: 'char'
            }
          };

          return Pet;

        })(cm.Model);
        f = function() {
          var p;
          return p = new Pet();
        };
        return expect(f).to.throwError();
      });
    });
    describe('with an unknown attribute', function() {
      return it('errors on instantiation', function() {
        var Pet, f;
        Pet = (function(_super) {

          __extends(Pet, _super);

          function Pet() {
            return Pet.__super__.constructor.apply(this, arguments);
          }

          Pet.prototype.fields = {
            species: {
              type: 'string'
            },
            name: {
              type: 'string',
              fdsa: ''
            }
          };

          return Pet;

        })(cm.Model);
        f = function() {
          var p;
          return p = new Pet();
        };
        return expect(f).to.throwError();
      });
    });
    describe('with "validate" that is not a function', function() {
      return it("errors on instantiation", function() {
        var Pet, f;
        Pet = (function(_super) {

          __extends(Pet, _super);

          function Pet() {
            return Pet.__super__.constructor.apply(this, arguments);
          }

          Pet.prototype.fields = {
            species: {
              type: 'string'
            },
            name: {
              type: 'string',
              validate: 'not empty'
            }
          };

          return Pet;

        })(cm.Model);
        f = function() {
          var p;
          return p = new Pet();
        };
        return expect(f).to.throwError();
      });
    });
    return describe('type "date"', function() {
      return it("works", function() {
        var Pet, try_this;
        Pet = (function(_super) {

          __extends(Pet, _super);

          function Pet() {
            return Pet.__super__.constructor.apply(this, arguments);
          }

          Pet.prototype.fields = {
            name: {
              type: 'string'
            },
            date_of_birth: {
              type: 'date'
            }
          };

          return Pet;

        })(cm.Model);
        try_this = function(x, expected_year, expected_month, expected_day) {
          var dt, p;
          p = new Pet();
          p.set('date_of_birth', x);
          dt = p.get('date_of_birth');
          if (dt instanceof Date) {
            expect(dt.getFullYear()).to.be(expected_year);
            expect(dt.getMonth() + 1).to.be(expected_month);
            expect(dt.getDate()).to.be(expected_day);
            expect(dt.getHours()).to.be(0);
            expect(dt.getMinutes()).to.be(0);
            return expect(dt.getSeconds()).to.be(0);
          } else {
            throw new Error("expected get to return a Date after setting date with (" + (typeof x) + ") " + x);
          }
        };
        try_this("28-JAN-1986", 1986, 1, 28);
        try_this("2007/12/25", 2007, 12, 25);
        try_this("Sat, 02 Jun 2012 15:39:27 GMT", 2012, 6, 2);
        try_this("09-JUN-2012", 2012, 6, 9);
        try_this("2012-JUN-07", 2012, 6, 7);
        return try_this([2001, 9, 11], 2001, 9, 11);
      });
    });
  });

}).call(this);
